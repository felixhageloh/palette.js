{"version":3,"sources":["node_modules/auto-reload-brunch/vendor/auto-reload.js","src/bucket.coffee","src/image.coffee","src/palette.coffee"],"names":[],"mappings":"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","file":"public/palette.js","sourcesContent":["(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=\"stylesheet\"]'))\n        .filter(function(link){\n          return (link != null && link.href != null);\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n    }\n  };\n  var port = ar.port || 9485;\n  var host = br.server || window.location.hostname;\n\n  var connect = function(){\n    var connection = new WebSocket('ws://' + host + ':' + port);\n    connection.onmessage = function(event){\n      if (ar.disabled) return;\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  connect();\n})();\n","module.exports = ->\n  api = {}\n\n  r = g = b = total = 0\n\n  api.add = (rgb) ->\n    r += rgb[0]\n    b += rgb[1]\n    g += rgb[2]\n\n    total++\n\n  api.count = ->\n    total\n\n  api.meanRgb = ->\n    [Math.round(r/total), Math.round(g/total), Math.round(b/total)]\n\n  api\n","getImageData = (image) ->\n  ctx = document.createElement(\"canvas\").getContext('2d')\n  ctx.drawImage(image, 0, 0)\n  ctx.getImageData(0, 0, image.width, image.height).data\n\n\nmodule.exports = (srcOrImg, callback) ->\n  api = {}\n\n  image = null\n\n  init = ->\n    image = new Image()\n    image.onload = -> callback(api)\n    image.src = if srcOrImg.src then srcOrImg.src else (srcOrImg or '')\n    return\n\n  api.eachPixel = (callback) ->\n    data   = getImageData(image)\n    length = data.length or image.width * image.height\n\n    getRgb = (pixelIdx)  ->\n      Array::slice.apply(data, [pixelIdx, pixelIdx+3])\n\n    callback getRgb(i) for i in [0..length-1] by 4\n\n  init()\n","Bucket = require 'src/bucket'\nImg    = require 'src/image'\n\nNUM_BUCKETS = 27 # must be a power of 3 or it will be converted to the closest power of 3\n\nmodule.exports = (srcOrImage, numColors, callback) ->\n  buckets            = []\n  chunksPerDimension = 0\n  chunkSize          = 1\n\n  run = (image) ->\n    # split a 3d space into numBuckets even sized cubes\n    chunksPerDimension = Math.round Math.pow(NUM_BUCKETS, 1/3)\n    numBuckets  = Math.pow chunksPerDimension, 3\n    chunkSize   = 255 / chunksPerDimension\n\n    buckets    = (Bucket() for _ in [0..numBuckets])\n    numSamples = fillBuckets(image)\n\n    buckets = (b for b in buckets when b.count() > 0)\n    buckets = buckets.sort (a,b) -> b.count() - a.count()\n\n    callback {\n      numSamples: numSamples\n      colors    : (bucket.meanRgb() for bucket, i in buckets when i < numColors)\n      counts    : (bucket.count()   for bucket, i in buckets when i < numColors)\n    }\n\n  fillBuckets = (image) ->\n    count = 0\n    image.eachPixel (rgb) ->\n      return unless (bucket = chooseBucket(rgb))\n      bucket.add(rgb)\n      count++\n    count\n\n  # get the bucket index of a bgr color array. Essentially we devide\n  # the color space into n equal sized qubes, where n is the number of\n  # buckets. Buckets are labled 0 to n where 0 is at x=y=z=0 and\n  # n is at x=y=z=sqrt(n,3)\n  chooseBucket = (rgb) ->\n    bucketIdx = 0\n\n    for colorValue, dim in rgb\n      k = Math.pow(chunksPerDimension, dim)\n      bucketIdx = bucketIdx + k * colorComponentChunk(colorValue)\n\n    buckets[bucketIdx]\n\n  # get the chunk index for a single dimension (zero based).\n  # If numBuckets is 8, then the number of chunks per dimension\n  # is 2, so the possible return values are 0 to 1.\n  colorComponentChunk = (colorValue) ->\n    idx = Math.floor colorValue / chunkSize\n\n    # ranges are endpoint exclusive, so if colorValue == 2*chunkSize\n    # the corresponding coordinate is still 1\n    idx-- if idx != 0 and colorValue % chunkSize == 0\n    idx\n\n  Img 'test.png', run\n\n\n"]}