{"version":3,"sources":["node_modules/auto-reload-brunch/vendor/auto-reload.js","src/cluster.coffee","src/distance.coffee","src/find-clusters.coffee","src/image.coffee","src/palette.coffee"],"names":[],"mappings":"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","file":"public/palette.js","sourcesContent":["(function() {\n  var WebSocket = window.WebSocket || window.MozWebSocket;\n  var br = window.brunch = (window.brunch || {});\n  var ar = br['auto-reload'] = (br['auto-reload'] || {});\n  if (!WebSocket || ar.disabled) return;\n\n  var cacheBuster = function(url){\n    var date = Math.round(Date.now() / 1000).toString();\n    url = url.replace(/(\\&|\\\\?)cacheBuster=\\d*/, '');\n    return url + (url.indexOf('?') >= 0 ? '&' : '?') +'cacheBuster=' + date;\n  };\n\n  var reloaders = {\n    page: function(){\n      window.location.reload(true);\n    },\n\n    stylesheet: function(){\n      [].slice\n        .call(document.querySelectorAll('link[rel=\"stylesheet\"]'))\n        .filter(function(link){\n          return (link != null && link.href != null);\n        })\n        .forEach(function(link) {\n          link.href = cacheBuster(link.href);\n        });\n    }\n  };\n  var port = ar.port || 9485;\n  var host = br.server || window.location.hostname;\n\n  var connect = function(){\n    var connection = new WebSocket('ws://' + host + ':' + port);\n    connection.onmessage = function(event){\n      if (ar.disabled) return;\n      var message = event.data;\n      var reloader = reloaders[message] || reloaders.page;\n      reloader();\n    };\n    connection.onerror = function(){\n      if (connection.readyState) connection.close();\n    };\n    connection.onclose = function(){\n      window.setTimeout(connect, 1000);\n    };\n  };\n  connect();\n})();\n","distance = require './distance'\n\nmodule.exports = (centroid) ->\n  api = {}\n\n  totals   = null # keep a running total\n  vectors  = []\n\n  api.add = (vector) ->\n    totals ?= (0 for _ in vector)\n    throw new Error(\"dimensions don't match\") unless vector.length == totals.length\n\n    for val, i in vector\n      totals[i] += val * (vector.weight ? 1)\n\n    centroid = null\n    vectors.push vector\n\n  api.count = ->\n    vectors.length\n\n  api.centroid = ->\n    return centroid if centroid?\n    return if (count = vectors.length) == 0\n    mean = (Math.round(total/count) for total in totals)\n\n    centroid     = vectors[0]\n    smallestDist = distance(mean, centroid)\n\n    for vector in vectors[1..]\n      continue unless (dist = distance(mean, vector)) < smallestDist\n      centroid     = vector\n      smallestDist = dist\n\n    centroid\n\n  api.clear = ->\n    totals = null\n    vectors.length = 0\n    centroid = null\n\n  api\n","  # Calculates the square distance of two vectors (presented as arrays).\n  # Undefined if vector dimensions don't match\n  module.exports = (a, b) ->\n    return if (dim = a.length) != b.length\n    deltaSum  = 0\n    deltaSum += Math.pow((b[i] - a[i]), 2) for i in [0...dim]\n\n    deltaSum\n","Cluster  = require './cluster'\ndistance = require './distance'\n\n# Finds numClusters clusters in vectors (based on geometric distance)\n# Somewhat k-means like, I guess\nmodule.exports = (vectors, numClusters) ->\n  numClusters = Math.min vectors.length, numClusters\n\n  return bail(vectors, numClusters) if vectors.length == numClusters\n\n  numTries  = 0\n  centroids = pickEvenly(numClusters, 3, 255)     #pickRandom(numClusters, vectors)\n  prevClusters = null\n\n  while numTries < 1000 and !centroidsEqual(centroids, prevClusters)\n    prevClusters = clusters\n    clusters  = (Cluster() for i in [0...numClusters])\n    centroids = step(vectors, centroids, clusters)\n    numTries++\n\n  clusters\n\nstep = (vectors, centroids, clusters) ->\n  for vector in vectors\n    cluster = clusters[closestIdx(centroids, vector)]\n    cluster.add vector\n\n  (cluster.centroid() for cluster, i in clusters when cluster.count() > 0)\n\nclosestIdx = (centroids, vector) ->\n  closest   = 0\n  smallestDist = null\n\n  for c, idx in centroids\n    dist = distance(c, vector)\n    smallestDist ?= dist\n    if dist < smallestDist\n      closest = idx\n      smallestDist = dist\n\n  closest\n\npickRandom = (n, samples) ->\n  picks = []\n  samples = (v for v in samples)\n\n  for _ in [0...n]\n    idx = Math.floor(Math.random() * samples.length)\n    picks.push(samples[idx])\n    samples.splice(idx, 1)\n  picks\n\npickEvenly = (n, dimensions, range) ->\n  chunk = range / n\n  vectors = []\n\n  for i in [0...n]\n    s = Math.round chunk * i + chunk/2\n    vectors.push (s for dim in [0...dimensions])\n\n  vectors\n\n\ncentroidsEqual = (old, clusters) ->\n  return false unless clusters\n  for centroid, i in old\n    return false unless vectorsEqual(centroid, clusters[i].centroid())\n\n  true\n\nvectorsEqual = (a, b) ->\n  return false if (a and !b) or (b and !a) or (!a and !b)\n  for val, i in a\n    return false unless val == b[i]\n\n  true\n\nbail = (vectors, numClusters) ->\n  clusters = (Cluster() for i in [0...numClusters])\n  cluster.add(vectors[i]) for cluster, i in clusters\n  clusters\n","getImageData = (image) ->\n  ctx = document.createElement(\"canvas\").getContext('2d')\n  ctx.drawImage(image, 0, 0)\n  ctx.getImageData(0, 0, image.width, image.height).data\n\n\nmodule.exports = (srcOrImg, callback) ->\n  api = {}\n\n  image = null\n\n  init = ->\n    image = new Image()\n    image.onload = -> callback(api)\n    image.src = if srcOrImg.src then srcOrImg.src else (srcOrImg or '')\n    return\n\n  api.eachPixel = (callback) ->\n    data   = getImageData(image)\n    length = data.length or image.width * image.height\n\n    getRgb = (pixelIdx)  ->\n      Array::slice.apply(data, [pixelIdx, pixelIdx+3])\n\n    callback getRgb(i) for i in [0..length-1] by 4\n\n  init()\n","Img    = require './image'\nfindClusters = require './find-clusters'\n\nmodule.exports = (srcOrImage, numColors, callback) ->\n\n  run = (image) ->\n    pixels = []\n    image.eachPixel (p) -> pixels.push(p) if p\n\n    clusters = findClusters pixels, numColors\n    clusters = clusters.sort (a,b) -> b.count() - a.count()\n\n    callback {\n      numSamples: pixels.length\n      colors    : (cluster.centroid() for cluster, i in clusters)\n      counts    : (cluster.count()    for cluster, i in clusters)\n    }\n\n  Img srcOrImage, run\n\n\n"]}